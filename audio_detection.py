# -*- coding: utf-8 -*-
import sounddevice as sd
import numpy as np
import re

THRESHOLD_DB = -35  # Ng∆∞·ª°ng ph√°t hi·ªán √¢m thanh (dBFS)

def list_input_devices():
    devices = sd.query_devices()
    input_devices = []
    print("\nüîä Danh s√°ch thi·∫øt b·ªã √¢m thanh ph·∫ßn c·ª©ng (hw:x,x):\n")
    for i, dev in enumerate(devices):
        if dev['max_input_channels'] > 0 and 'hw:' in dev['name']:
            match = re.search(r'\(hw:\d+,\d+\)', dev['name'])
            if match:
                print(f"{len(input_devices)}: {dev['name']} (Channels: {dev['max_input_channels']}, Rate: {int(dev['default_samplerate'])} Hz)")
                input_devices.append({
                    'index': i,
                    'name': dev['name'],
                    'channels': dev['max_input_channels'],
                    'rate': int(dev['default_samplerate'])
                })
    return input_devices

def calculate_rms_db(indata):
    rms = np.sqrt(np.mean(np.square(indata)))
    db = 20 * np.log10(rms / 32767 + 1e-10)  # dBFS
    return db

def detect_audio(device_info):
    try:
        stream = sd.InputStream(
            device=device_info['index'],
            channels=device_info['channels'],
            samplerate=device_info['rate'],
            dtype='int16'
        )

        print(f"\nüéôÔ∏è ƒêang nghe t·ª´ thi·∫øt b·ªã: {device_info['name']}")
        print("Nh·∫•n 'q' r·ªìi Enter ƒë·ªÉ quay l·∫°i menu ch·ªçn thi·∫øt b·ªã. Nh·∫•n Ctrl+C ƒë·ªÉ tho√°t.\n")
        print("L∆∞u √Ω: M·ª©c t√≠n hi·ªáu ƒë∆∞·ª£c ƒëo b·∫±ng dBFS (Decibel Full Scale, 0 l√† l·ªõn nh·∫•t)\n")

        with stream:
            while True:
                user_input = input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c, ho·∫∑c g√µ 'q' ƒë·ªÉ quay l·∫°i: ")
                if user_input.strip().lower() == 'q':
                    break

                indata_raw, _ = stream.read(1024)
                indata = np.frombuffer(indata_raw, dtype=np.int16)
                rms_db = calculate_rms_db(indata)
                audio_detected = int(rms_db > THRESHOLD_DB)

                print(f"√Çm thanh: {audio_detected} | M·ª©c dB: {rms_db:.2f} dBFS")

    except Exception as e:
        print(f"L·ªói: {e}")

def main():
    while True:
        input_devices = list_input_devices()
        if not input_devices:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã ƒë·∫ßu v√†o n√†o.")
            return

        try:
            choice = int(input("\nCh·ªçn thi·∫øt b·ªã b·∫±ng s·ªë (ho·∫∑c nh·∫•n Enter ƒë·ªÉ tho√°t): ").strip())
            if 0 <= choice < len(input_devices):
                detect_audio(input_devices[choice])
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("üëã Tho√°t.")
            break

if __name__ == '__main__':
    main()
